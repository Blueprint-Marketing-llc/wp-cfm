{"name":"WP-CFM","tagline":"WordPress Configuration Management","body":"#### WP-CFM: Configuration Management for WordPress\r\n\r\nDeploying database changes in WordPress is hard, especially when working on teams with multiple developers. This project aims at solving this problem by storing database configuration in the filesystem. It's like Drupal's \"Features\" module for WordPress.\r\n\r\n![Admin Screen](http://i.imgur.com/opQhDUa.png)\r\n\r\n[Watch the introduction screencast (4 minutes)](http://screencast.com/t/HGmkd8S44P7s)\r\n\r\n#### What does this mean for me?\r\n\r\n* Less need to copy the database. If you make changes, **Push** your bundle to the filesystem. To load changes, **Pull** the bundle into your database.\r\n* No need to manually apply database settings changes. No more \"fire drills\" where you're rushing to figure out which settings you forgot to change.\r\n* Track and migrate configuration files using git, subversion, etc.\r\n\r\n#### Terminology\r\n\r\n* **Bundle**: A group of settings to track. This could be a single setting, or all the site's available settings.\r\n* **Push**: Export configuration from your database to the filesystem.\r\n* **Pull**: Import configuration from the filesystem into your database.\r\n\r\n#### Developer Hooks\r\n\r\nThe `wpcfm_configuration_items` hook lets you register custom configuration items.\r\n\r\n```php\r\nfunction my_configuration_items( $items ) {\r\n    $items['cfs_field_groups'] = array(\r\n        'value' => 'MY CONFIGURATION DATA',\r\n        'group' => 'WP Options', // optional\r\n        'callback' => 'my_pull_handler', // optional\r\n    );\r\n    return $items;\r\n}\r\nadd_filter( 'wpcfm_configuration_items', 'my_configuration_items' );\r\n```\r\n\r\nThis filter contains an associative array of all configuration options. Each option has a unique key, and supports several parameters:\r\n\r\n* **value**: (required) The configuration data to store.\r\n* **group**: (optional) A group name, allowing multiple configuration options to be grouped together. This is only used in the admin UI. Default = \"WP Options\"\r\n* **callback**: (optional) If the configuration data is **not** stored within `wp_options`, then WP-CFM needs to know how to Pull it into the database. This parameter accepts a (string) function name or (array) method. A `$params` array is passed into the callback function (see below).\r\n\r\n#### Is that it?\r\n\r\nAlmost! WP-CFM automatically handles configuration within the `wp_options` table. If your plugin stores settings elsewhere, then use the above `callback` parameter to tell WP-CFM how to properly import (Pull) configuration into the database.\r\n\r\n```php\r\n/**\r\n * $params['name']          The option name\r\n * $params['group']         The option group\r\n * $params['old_value']     The current DB value that will get overwritten\r\n * $params['new_value']     The new DB value\r\n */\r\nfunction my_pull_handler( $params ) {\r\n    // Save something\r\n}\r\n```\r\n\r\n#### WP-CLI\r\n\r\nWP-CFM supports pulling / pushing bundles from the command-line using [WP-CLI](http://wp-cli.org/):\r\n\r\n```php\r\nwp config pull <bundle_name>\r\nwp config push <bundle_name>\r\n```\r\n\r\nYou can optionally set `bundle_name` to \"all\" to push / pull all bundles at once.\r\n","google":"UA-51457218-1","note":"Don't delete this file! It's used internally to help with page regeneration."}